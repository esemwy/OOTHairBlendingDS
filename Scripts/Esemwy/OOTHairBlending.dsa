// DAZ Studio version 4.8.0.59 filetype DAZ Script

var info = DzFileInfo(getScriptFileName());
var g_IconFolder = "%1/%2".arg(info.path()).arg("HairBlending");
var programName         = "OOTHairBlender";
var versionName         = "v1";

print(g_IconFolder);
// Get the image manager
var oImageMgr = App.getImageMgr();

var sBasePath = "Runtime/Textures/outoftouch/!hair";
var sAbsolutePath = App.getContentMgr().getAbsolutePath( sBasePath , true );
var sTexturePath = "%1/OOTHairTextures".arg( sAbsolutePath );
var sMaskPath = "%1/OOTHairAlpha".arg( sAbsolutePath );

var matList =  [
    'Bangs1',
    'Bangs2',
    'Side1',
    'Side2',
    'Front1',
    'Front2',
    'Back',
    'BackHighlights'
];
var sBaseImageName;

var bSomeSelected = false;
var oNode = Scene.getPrimarySelection();
do {
    if ( ! oNode ) break;
    var oObj = oNode.getObject();
    if ( ! oObj ) break;
    var nShapes = oObj.getNumShapes();
    for (var i = 0; i < nShapes; i++) {
        oShape = oObj.getShape(i);
        if (! oShape ) continue;
        var nMats = oShape.getNumMaterials();
        for (var j = 0; j < nMats; j++) {
            var oMat = oShape.getMaterial(j);
            if ( ! oMat ) continue;
            // if ( ! oMat.isSelected() ) || ( matList.indexOf(oMat.name) == -1 ) ) continue;
            if ( ! oMat.isSelected() )  continue;
            var oTexture = oMat.getColorMap();
            if (oTexture) {
                if ( ! bSomeSelected ) {
                    // Get a unique name for the image
                    var sTextureName = oImageMgr.getUniqueImageName( "OOT Hair Blending" );
                    // Create a layered texture
                    var oLayeredTexture = oImageMgr.createLayeredTexture( sTextureName );
                    bSomeSelected = true;
                }
                // Assign the texture to an owner so we don't cause a memory leak if something goes awry
                sBaseImageName = DzFileInfo( oTexture.getFilename() ).baseName()+".jpg";
                oMat.setColorMap( oLayeredTexture );
            }
        }
    }
    if (! bSomeSelected) break;

    //set dialog
    var wDlg = new DzDialog;
    wDlg.caption = programName + " " + versionName;

    var gb = new DzVGroupBox( wDlg );

    var gbMaterial = new DzVGroupBox( gb );
    gbMaterial.columns = 1;

    var wVbgLayer = new DzVButtonGroup( gbMaterial );
    wVbgLayer.columns = 10;

    var oMatDir = DzDir(g_IconFolder);
    var aLayerFiles = oMatDir.entryList("*.hair.jpg");
    var nFiles = aLayerFiles.length;
    for (var i=0; i < nFiles; i++) {
        var sFilename = String("%1/%2").arg( g_IconFolder ).arg( aLayerFiles[i] );
        var button = new DzRadioButton( wVbgLayer );
        button.pixmap = new Pixmap( sFilename );
    }
    var sTopImageName;
    connect(wVbgLayer, "clicked(int)", function (i) {
        sTopImageName = "%1OOTHair.jpg".arg( aLayerFiles[i].substr(0,2) )
    });

    var wVbgMask  = new DzVButtonGroup( gbMaterial );
    wVbgMask.columns = 10;
    var aMaskFiles = oMatDir.entryList("*.alpha.jpg");
    var nFiles = aMaskFiles.length;
    for (var i=0; i < nFiles; i++) {
        var sFilename = String("%1/%2").arg( g_IconFolder ).arg( aMaskFiles[i] );
        var button = new DzRadioButton( wVbgMask );
        button.pixmap = new Pixmap( sFilename );
    }
    var sMaskImageName;
    connect(wVbgMask, "clicked(int)", function (i) {
        sMaskImageName = "%1OOTHairAlpha.jpg".arg( aMaskFiles[i].substr(0,2) )
    });

    var wDlgBtnsGB = new DzVGroupBox(gb);
    wDlgBtnsGB.columns = 2;
    
    var wAcceptBtn = new DzPushButton( wDlgBtnsGB );
    wAcceptBtn.text = "Do it";
    wDlg.setAcceptButton( wAcceptBtn );

    var wCancelBtn = new DzPushButton( wDlgBtnsGB );
    wCancelBtn.text = "&Exit";
    wDlg.setRejectButton( wCancelBtn );

    wDlg.width = 950;
    wDlg.height = 600;
    var r = wDlg.exec();
    if (!r) break;

    print("Blending "+ sBaseImageName+", "+sTopImageName+", "+sMaskImageName);
    // Set the dimensions of the texture
    oLayeredTexture.size = new Size( 3000, 3000 );
    blend(oLayeredTexture, sBaseImageName, sTopImageName, sMaskImageName);

} while (false);

function blend(texture, base, top, mask)
{
    var oLayeredTexture = texture;

    // Define the absolute path of the layer images
    
    var sTopLayerPath =  String("%1/%2").arg( sTexturePath ).arg( top  ); // 01OOTHair
    var sBaseLayerPath = String("%1/%2").arg( sTexturePath ).arg( base ); // 01OOTHair
    var sMaskLayerPath = String("%1/%2").arg(   sMaskPath  ).arg( mask ); // 06OOTHairAlpha
    // var oTopSize = Image(sTopLayerPath).size;
    // var oBaseSize = Image(sBaseLayerPath).size;
    // var oMaskSize = Image(sMaskLayerPath).size;
    // var nMaskScale = oBaseSize.width / oMaskSize.width;
    // var nTopScale = oTopSize.width / oMaskSize.width;

    // Create file info objects for easy path operations
    var oTopLayerFile  = new DzFileInfo( sTopLayerPath );
    var oBaseLayerFile = new DzFileInfo( sBaseLayerPath );
    var oMaskLayerFile = new DzFileInfo( sMaskLayerPath );

    // Define the names of the layers
    var sTopLayerName  = oTopLayerFile.baseName();
    var sBaseLayerName = oBaseLayerFile.baseName();
    var sMaskLayerName = String("%1 Mask").arg( oMaskLayerFile.baseName() );

    // If the version is 4.6.2.23 or newer
    if( App.version64 >= 1125925676777495 ){
        // If the base layer file exists
        if( oBaseLayerFile.exists() ){
            // Add top layer
            var oBaseLayer = oLayeredTexture.createLayer( sBaseLayerName );
            oBaseLayer.imageFile = sBaseLayerPath; 

            // Create a new layer
            var oLayer = oLayeredTexture.createLayer( sTopLayerName );
            // Set the absolute path of the image for the layer
            oLayer.imageFile = sTopLayerPath; 

            // If the mask layer file exists
            if( oMaskLayerFile ){
                // Create a new mask
                var oMask = oLayer.createMask( sMaskLayerName );
                // Set the absolute path of the image for the mask
                oMask.imageFile = sMaskLayerPath;
                oMask.xScale = 1.5;
                oMask.yScale = 1.5;
            }
        }

    // If the version is older than 4.6.2.23
    } else {
        // Create a layered image
        var oLayeredImage = new DzLayeredImage();

        // If the base layer file exists
        if( oBaseLayerFile.exists() ){
            // Add top layer
            var oBaseImageLayer = new DzImageFileLayer();

            // Set the absolute path of the image for the layer
            oBaseImageLayer.filename = sBaseLayerPath;
            // Set the label for the layer
            oBaseImageLayer.label = sBaseLayerName;
            // Add the layer
            oBaseLayeredImage.addLayer( oImageLayer );

            // Create a new layer
            var oImageLayer = new DzImageFileLayer();
            // Set the absolute path of the image for the layer
            oImageLayer.filename = sTopLayerPath;
            // Set the label for the layer
            oImageLayer.label = sTopLayerName;
            // Add the layer
            oLayeredImage.addLayer( oImageLayer );
    
            // If the mask layer file exists
            if( oMaskLayerFile ){
                // Create a new mask
                var oImageMask = new DzImageMask();
                // Set the absolute path of the image for the mask
                oImageMask.filename = sMaskLayerPath;
                // Set the label for the mask
                oImageMask.label = sMaskLayerName;
                oMask.addManipulator(DzScaleManip(1.5, 1.5));
                // Set the layer mask
                oImageLayer.setMask( oImageMask );
            }
        }

        // Convert the layered image into a layered texture
        oLayeredImage.toLayeredTexture( oLayeredTexture );
    }
}

function dumpBehavior(obj) {
  var properties = new RegExp("([a-zA-Z0-9]+(\\(.*?\\))?),", "g");
  print(Object.getOwnPropertyNames(obj).sort().toString().replace(properties, "$1\n"));
}
