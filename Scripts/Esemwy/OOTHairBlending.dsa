// DAZ Studio version 4.8.0.59 filetype DAZ Script

var g_info = DzFileInfo(getScriptFileName());
var oContentMgr = App.getContentMgr();

var g_HairIconFolder = oContentMgr.getAbsolutePath( "Runtime/Textures/Esemwy/HairBlending/hair", true);
var g_AlphaIconFolder = oContentMgr.getAbsolutePath( "Runtime/Textures/Esemwy/HairBlending/alpha", true);
var g_programName         = "OOTHairBlender";
var g_versionName         = "v2.1";


function perror(e) {
    print("%1: %2".arg(g_programName).arg(e));
}

function trimFileName(basePath, fullPath) {
    var nStart = basePath.length;
    if (! basePath.endsWith("/")) nStart += 1;
    var nEnd = fullPath.length;
    return fullPath.mid(nStart, nEnd);
}

function anySelected() {
    var oMat = getMaterialObject();
    if( !oMat ) return false;
    var nMaterials = oMat.getNumMaterials();
    var oMaterial;
    for ( var i = 0; i < nMaterials; i++ ) {
        oMaterial = oMat.getMaterial( i );
        if (!oMaterial) continue;
        if (!oMaterial.isSelected()) continue;
        return true;
    }
    return false;
}

function getMaterialObject() {
    var DSVersion = new Number( App.versionString );
    var nNodes = Scene.getNumNodes();
    for (var i=0; i < nNodes; i++) {
        var oNode = Scene.getNode(i)
        if (DSVersion >= 4.8) {
            if (oNode.inherits("DzBone")) {
                oNode = oNode.getSkeleton();
            }
        }
        var oObj = oNode.getObject();
        if (! oObj) continue;
        var oShape = oObj.getCurrentShape();
        if (! oShape) continue;
        var oMat = oShape.getMaterial(0);
        if (oMat) return oMat;
    }
}
function editTextureLIE(oMaterial, sBasePath, sLayerPath, sMaskPath) {
    var oBaseFile = new DzFileInfo( sBasePath );
    var oLayerFile  = new DzFileInfo( sLayerPath );
    var oMaskFile = new DzFileInfo( sMaskPath );

	var sBaseName = oBaseFile.baseName();
	var sLayerName  = oLayerFile.baseName();
	var sMaskName = String("%1 Mask").arg( oMaskFile.baseName() );

    var oBaseSize = Image(sBasePath).size;
    var oLayerSize = Image(sLayerPath).size;
    var oMaskSize = Image(sMaskPath).size;
    var nLayerScale = oBaseSize.width / oLayerSize.width;
    var nMaskScale = oBaseSize.width / oMaskSize.width;
	
	var oImageMgr = App.getImageMgr();
	var textureName = oImageMgr.getUniqueImageName("OOT Hair Blending");
	var oNewLayeredTexture = oImageMgr.createLayeredTexture(textureName);
	oNewLayeredTexture.size = oBaseSize;
	var oLayer0 = oNewLayeredTexture.createLayer( sBaseName );
	var oLayer1 = oNewLayeredTexture.createLayer( sLayerName );
	var oMask = oLayer1.createMask( sMaskName );
	
	// Set the absolute path of the image for the layer
	oLayer0.imageFile = sBasePath; 
	oLayer1.imageFile = sLayerPath; 
	oLayer1.xScale = nLayerScale;
	oLayer1.yScale = nLayerScale;
	
	oMask.imageFile = sMaskPath;
	oMask.xScale = nMaskScale;
	oMask.yScale = nMaskScale;
	oMaterial.setColorMap(oNewLayeredTexture);
}

function editTextureIray(oMaterial, sBasePath, sLayerPath, sMaskPath) {
	var oOverlayWeight = oMaterial.findProperty('Diffuse Overlay Weight');
	var oOverlayColor = oMaterial.findProperty('Diffuse Overlay Color');
	var oOverlayRoughness = oMaterial.findProperty('Diffuse Overlay Roughness');
	var oDiffuseColor = oMaterial.findProperty('Diffuse Color');
	var oDiffuseRoughness = oMaterial.findProperty('Diffuse Roughness');

	oOverlayWeight.setValue(1);
	oOverlayWeight.setMap(sMaskPath);
	oOverlayColor.setValue(0xFFFFFF);
	oOverlayColor.setMap(sLayerPath);
	oDiffuseColor.setMap(sBasePath);
	var nRoughness = oDiffuseRoughness.getValue();
	if (nRoughness > 0.0) {
		oOverlayRoughness.setValue(nRoughness);
		oOverlayRoughness.setMap(sMaskPath);
	}
}

function editTexture( sBasePath, sLayerPath, sMaskPath, bUseShader ) {
    var oMat = getMaterialObject();
    if( !oMat ) return;
    var nMaterials = oMat.getNumMaterials();
    var oMaterial;
    var oTexture;
    for ( var i = 0; i < nMaterials; i++ ) {
        oMaterial = oMat.getMaterial( i );
        if (!oMaterial) continue;
        if (!oMaterial.isSelected()) continue;
        oTexture = oMaterial.getColorMap();
        if (!oTexture) continue;
        var oProp = oMat.findProperty('Diffuse Overlay Weight');
        if (oProp && bUseShader) {
        	editTextureIray(oMaterial, sBasePath, sLayerPath, sMaskPath);
        }
        else {
        	editTextureLIE(oMaterial, sBasePath, sLayerPath, sMaskPath);
        }
    }
}

function hairBlending(base, layer, mask, bUseShader)
{
    // Define the absolute path of the layer images
    var oContentMgr = App.getContentMgr();
    var sBasePath =  oContentMgr.getAbsolutePath( String("Runtime/Textures/%1").arg(base), true );
    var sLayerPath =  oContentMgr.getAbsolutePath( String("Runtime/Textures/%1").arg(layer), true );
    var sMaskPath =  oContentMgr.getAbsolutePath( String("Runtime/Textures/%1").arg(mask), true );

    perror("Blending base: %1, layer: %2, mask: %3.".arg(base).arg(layer).arg(mask))

    // Create file info objects for easy path operations
    var oBaseFile = new DzFileInfo( sBasePath );
    var oLayerFile  = new DzFileInfo( sLayerPath );
    var oMaskFile = new DzFileInfo( sMaskPath );


    if ( oBaseFile.exists() && oLayerFile.exists() && oMaskFile.exists() ) {
	    // Define the names of the layers
        editTexture(sBasePath, sLayerPath, sMaskPath, bUseShader);
    }
    else {
        if (! oBaseFile.exists() ) {
            perror(String("Base '%1' does not exist.").arg(base));
            MessageBox.critical( String("Base '%1' does not exist.").arg(base), "File Error", "&OK" );
        }
        if (! oLayerFile.exists() ) {
            perror(String("Layer '%1' does not exist.").arg(layer));
            MessageBox.critical( String("Layer '%1' does not exist.").arg(layer), "File Error", "&OK" );
        }
        if (! oMaskFile.exists() ) {
            perror(String("Mask '%1' does not exist.").arg(mask));
            MessageBox.critical( String("Mask '%1' does not exist.").arg(mask), "File Error", "&OK" );
        }
        return;
    }
}

function saveSetting( key, keyVal )
{
    DzAppSettings(g_programName).setStringValue( key, keyVal );
}

function getSetting( key, defVal )
{
    return DzAppSettings(g_programName).getStringValue( key, defVal );
}

function saveBoolSetting( key, keyVal )
{
    DzAppSettings(g_programName).setBoolValue( key, keyVal );
}

function getBoolSetting( key, defVal )
{
    return DzAppSettings(g_programName).getBoolValue( key, defVal );
}

function dumpBehavior(obj) {
    var aPropertyNames = Object.getOwnPropertyNames(obj).sort();
    for (var i = 0; i < aPropertyNames.length; i++) {
        print(obj.className()+"::"+aPropertyNames[i].toString());
    }
}


function main() {
    var oMat = getMaterialObject();
    if (! anySelected()) {
        perror("No material zones selected.");
        MessageBox.critical( String("No Materials selected."), "Execution Error", "&OK" );
        return;
    }
            
    //set dialog
    var wDlg = new DzDialog;
    wDlg.caption = g_programName + " " + g_versionName;

    var gb = new DzVGroupBox( wDlg );
    gb.columns = 2;
    gb.setFixedWidth(825);
    
    var saBase = DzScrollArea ( gb );
    saBase.setHorizontalScrollbarDisplay( false );
    saBase.hideFrame();
    var gbBase = DzVGroupBox( gb );
    gbBase.columns = 1;
    var wVbgBase = new DzVButtonGroup( gbBase );
    wVbgBase.columns = 4;
    wVbgBase.title = "Base";

    var saLayer = DzScrollArea ( gb   );
    saLayer.setHorizontalScrollbarDisplay( false );
    saLayer.hideFrame();
    var gbLayer = DzVGroupBox( gb );
    saLayer.hideFrame();
    var wVbgLayer = new DzVButtonGroup( gbLayer );
    wVbgLayer.columns = 4;
    wVbgLayer.title = "Layer";

    var oMatDir = DzDir(g_HairIconFolder);
    var aTextureFiles = oMatDir.getFilesFromDir(Array("*.jpg"), true);
    var nTextureFiles = aTextureFiles.length;
    for (var i=0; i < nTextureFiles; i++) {
        var sFilename = aTextureFiles[i];
        var button1 = new DzRadioButton( wVbgLayer );
        button1.pixmap = new Pixmap( sFilename );
        var button2 = new DzRadioButton( wVbgBase );
        button2.pixmap = new Pixmap( sFilename );
    }
    saBase.setWidget(gbBase);
    saLayer.setWidget(gbLayer);
    wVbgBase.selected = getSetting("Base", 0);
    wVbgLayer.selected = getSetting("Layer", 0);
 
    connect(wVbgLayer, "clicked(int)", function (i) {
        saveSetting("Layer", i);
    });
    connect(wVbgBase, "clicked(int)", function (i) {
        saveSetting("Base", i);
    });

    var saMask = DzScrollArea ( gb   );
    var gbMask = DzVGroupBox( gb );
    saLayer.setHorizontalScrollbarDisplay( false );
    saLayer.hideFrame();
    var wVbgMask  = new DzVButtonGroup( gbMask );
    wVbgMask.columns = 4;
    wVbgMask.title = "Mask";

    oMatDir = DzDir(g_AlphaIconFolder);
    var aMaskFiles = oMatDir.getFilesFromDir(Array("*.jpg"), true);
    var nMaskFiles = aMaskFiles.length;
    for (var i=0; i < nMaskFiles; i++) {
        var sFilename = aMaskFiles[i];
        var button = new DzRadioButton( wVbgMask );
        button.pixmap = new Pixmap( sFilename );
    }
    saMask.setWidget(gbMask);
    wVbgMask.selected = getSetting("Mask", 0);

    connect(wVbgMask, "clicked(int)", function (i) {
        saveSetting("Mask", i);
    });

    var wDlgBtnsGB = new DzVGroupBox(gb);
    wDlgBtnsGB.columns = 3;

    var wAcceptBtn = new DzPushButton( wDlgBtnsGB );
    wAcceptBtn.text = qsTr("Do it");
    wDlg.setAcceptButton( wAcceptBtn );

    var wCancelBtn = new DzPushButton( wDlgBtnsGB );
    wCancelBtn.text = qsTr("Exit");
    wDlg.setRejectButton( wCancelBtn );

	var wIrayChk = new DzCheckBox(wDlgBtnsGB);
	wIrayChk.text = "Use Shader";
    wIrayChk.checked = getBoolSetting("UseShader", true);
    connect(wIrayChk, "toggled(bool)", function(b) {
    	saveBoolSetting("UseShader", b);
    });
    
    wDlg.width = 840;
    wDlg.height = 550;
    var r = wDlg.exec();
    if (r) {
        var sTrimBase = trimFileName(g_HairIconFolder, aTextureFiles[getSetting("Base", 0)]);
        var sTrimLayer = trimFileName(g_HairIconFolder, aTextureFiles[getSetting("Layer", 0)]);
        var sTrimMask = trimFileName(g_AlphaIconFolder, aMaskFiles[getSetting("Mask", 0)]);
        var bUseShader = getBoolSetting("UseShader", true);
        hairBlending(sTrimBase, sTrimLayer, sTrimMask, bUseShader);
    }
}

main();
